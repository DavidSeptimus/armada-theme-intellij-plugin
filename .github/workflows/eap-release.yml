# GitHub Actions Workflow for nightly EAP releases
# Runs nightly on main branch to build and publish EAP builds to the EAP release channel

name: EAP Release
on:
  schedule:
    # Run nightly at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_publish:
        description: 'Force publish even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: eap-release
  cancel-in-progress: true

jobs:
  check-changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.changes.outputs.should-publish }}
      commit-sha: ${{ steps.changes.outputs.commit-sha }}
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes since last EAP release
        id: changes
        run: |
          # Check if this is a manual force publish
          if [ "${{ github.event.inputs.force_publish }}" = "true" ]; then
            echo "Manual force publish requested"
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get the latest EAP release tag
          LATEST_EAP_TAG=$(git tag --list --sort=-version:refname | grep -E '^v.*-eap.*$' | head -n 1)

          if [ -z "$LATEST_EAP_TAG" ]; then
            echo "No previous EAP release found, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            # Check if there are commits since the last EAP release
            COMMITS_SINCE=$(git rev-list --count ${LATEST_EAP_TAG}..HEAD)
            if [ "$COMMITS_SINCE" -gt 0 ]; then
              echo "Found $COMMITS_SINCE commits since last EAP release ($LATEST_EAP_TAG)"
              echo "should-publish=true" >> $GITHUB_OUTPUT
            else
              echo "No changes since last EAP release ($LATEST_EAP_TAG)"
              echo "should-publish=false" >> $GITHUB_OUTPUT
            fi
          fi

          echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ check-changes ]
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Run tests
      - name: Run Tests
        run: ./gradlew checkEAP

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v5
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2025.2
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ test ]
    runs-on: macos-latest
    steps:

      #      # Free GitHub Actions Environment Disk Space
      #      - name: Maximize Build Space
      #        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
      #        with:
      #          tool-cache: true
      #          large-packages: true

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPluginEAP -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  eap-release:
    name: Publish EAP Release
    needs: [ test ]
    if: needs.check-changes.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: true
          large-packages: true

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Get EAP version
      - name: Get EAP Version
        id: version
        run: |
          EAP_VERSION=$(./gradlew properties -Peap=true --console=plain -q | grep "^version:" | cut -f2- -d ' ')
          echo "eap-version=$EAP_VERSION" >> $GITHUB_OUTPUT
          echo "Building EAP version: $EAP_VERSION"

      # Build and publish EAP plugin
      - name: Build and Publish EAP Plugin
        env:
          IS_EAP_BUILD: "true"
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishEAP

      # Create EAP release tag
      - name: Create EAP Release Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          EAP_VERSION="${{ steps.version.outputs.eap-version }}"
          TAG_NAME="v$EAP_VERSION"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          # Create and push tag
          git tag -a "$TAG_NAME" -m "EAP Release $EAP_VERSION"
          git push origin "$TAG_NAME"

      # Create GitHub release
      - name: Create EAP GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          EAP_VERSION="${{ steps.version.outputs.eap-version }}"
          TAG_NAME="v$EAP_VERSION"
          COMMIT_SHA="${{ needs.check-changes.outputs.commit-sha }}"

          # Get recent commits for release notes
          RECENT_COMMITS=$(git log --pretty=format:"- %s (%h)" --since="24 hours ago" | head -10)

          gh release create "$TAG_NAME" \
            --title "EAP Release $EAP_VERSION" \
            --notes "$(cat << 'EOM'
          🚀 **Early Access Program (EAP) Release**

          This is an automated nightly build containing the latest changes from the main branch.

          **⚠️ Warning**: EAP releases are experimental and may contain bugs. Use at your own risk.

          **Recent Changes:**
          $RECENT_COMMITS

          **Installation**: Download the plugin from the [JetBrains Marketplace EAP channel](https://plugins.jetbrains.com/plugin/26844-armada-theme) or install via IDE settings.

          Built from commit: $COMMIT_SHA
          EOM
          )" \
            --prerelease